import { join } from 'path';

import {
  DataSourceOptions,
  getMetadataArgsStorage,
  MigrationInterface,
  QueryRunner,
} from 'typeorm';

export type GetOrmConfigParam = {
  /**
   * Base configuration for the connection to the database
   * Read from `env`
   */
  baseConfig: DataSourceOptions | undefined;

  /**
   * Force drop of the schema when initializing the connection
   * Not applied when `env.NODE_ENV` is `production`
   */
  forceDropSchema?: boolean;
  /**
   * Object containing all the migration generated by typeorm
   */
  migrations?: Record<string, unknown>;
};

export function getOrmConfig({
  baseConfig,
  forceDropSchema,
  migrations,
}: GetOrmConfigParam): DataSourceOptions {
  if (!baseConfig) throw new Error('Database config is nto defined');
  const entities = getMetadataArgsStorage().tables.map((tbl) => tbl.target);

  // @see https://typeorm.io/data-source-options#common-data-source-options
  const defaultConfig: DataSourceOptions = {
    type: 'postgres',
    entities,
    dropSchema: false,
    synchronize: false,

    logging: ['error', 'warn', 'query'],
  };

  let ormConfig: DataSourceOptions = Object.assign(baseConfig, defaultConfig);

  // Migrations applied only for dev and production environment
  if (process.env.NODE_ENV !== 'test' && migrations) {
    ormConfig = Object.assign(ormConfig, {
      migrationsRun: true,
      migrations: Object.values(migrations),
      cli: {
        migrationsDir: join(
          __dirname,
          '../../../../migrations/src/lib/migrations'
        ),
      },
    });
  }

  if (process.env.NODE_ENV === 'test') {
    ormConfig = Object.assign(ormConfig, {
      database: `test_${baseConfig.database}`,
      logging: false,
      // Since we're not running migration in test env, we need this fake
      // migration plan to activate extensions
      migrationsRun: true,
      migrations: [
        class Extensions1690981906874 implements MigrationInterface {
          public async up(queryRunner: QueryRunner): Promise<void> {
            // @see https://www.postgresql.org/docs/current/unaccent.html
            await queryRunner.query(`CREATE EXTENSION IF NOT EXISTS unaccent`);

            // @see https://www.postgresql.org/docs/current/citext.html
            await queryRunner.query(`CREATE EXTENSION IF NOT EXISTS citext`);
          }

          public async down(): Promise<void> {
            // not needed
          }
        },
      ],
      // DropSchema and Synchronize for test env
      dropSchema: true,
      synchronize: true,
    });
  }

  if (process.env.NODE_ENV !== 'production' && forceDropSchema) {
    ormConfig = Object.assign(ormConfig, { dropSchema: true });
  }

  // Remove migration, mostly used in CI for task that check generated files and needs to run the apps
  if (process.env.DISABLE_MIGRATIONS === 'false') {
    ormConfig = Object.assign(ormConfig, {
      migrationsRun: false,
    });
  }

  return ormConfig;
}
